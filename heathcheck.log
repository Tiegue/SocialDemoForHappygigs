http://localhost:4446/actuator/health
{
  "status": "UP",
  "components": {
    "db": {
      "status": "UP",
      "details": {
        "database": "PostgreSQL",
        "validationQuery": "isValid()"
      }
    },
    "diskSpace": {
      "status": "UP",
      "details": {
        "total": 499963174912,
        "free": 343295778816,
        "threshold": 10485760,
        "path": "/Users/tiegue/Dev/socialDemo/graphqlserver/.",
        "exists": true
      }
    },
    "ping": {
      "status": "UP"
    },
    "redis": {
      "status": "UP",
      "details": {
        "version": "8.0.1"
      }
    },
    "ssl": {
      "status": "UP",
      "details": {
        "validChains": [],
        "invalidChains": []
      }
    }
  }
}

http://localhost:4446/actuator/metrics/http.server.requests
{
  "name": "http.server.requests",
  "baseUnit": "seconds",
  "measurements": [
    {
      "statistic": "COUNT",
      "value": 1
    },
    {
      "statistic": "TOTAL_TIME",
      "value": 0.631075062
    },
    {
      "statistic": "MAX",
      "value": 0.631075062
    }
  ],
  "availableTags": [
    {
      "tag": "exception",
      "values": [
        "none"
      ]
    },
    {
      "tag": "method",
      "values": [
        "GET"
      ]
    },
    {
      "tag": "error",
      "values": [
        "none"
      ]
    },
    {
      "tag": "uri",
      "values": [
        "/actuator/health"
      ]
    },
    {
      "tag": "outcome",
      "values": [
        "SUCCESS"
      ]
    },
    {
      "tag": "status",
      "values": [
        "200"
      ]
    }
  ]
}

http://localhost:4446/actuator/prometheus
# HELP application_ready_time_seconds Time taken for the application to be ready to service requests
# TYPE application_ready_time_seconds gauge
application_ready_time_seconds{main_application_class="socialdemo.graphql.GraphqlWebfluxApplication"} 11.039
# HELP application_started_time_seconds Time taken to start the application
# TYPE application_started_time_seconds gauge
application_started_time_seconds{main_application_class="socialdemo.graphql.GraphqlWebfluxApplication"} 11.034
# HELP disk_free_bytes Usable space for path
# TYPE disk_free_bytes gauge
disk_free_bytes{path="/Users/tiegue/Dev/socialDemo/graphqlserver/."} 3.43298535424E11
# HELP disk_total_bytes Total space for path
# TYPE disk_total_bytes gauge
disk_total_bytes{path="/Users/tiegue/Dev/socialDemo/graphqlserver/."} 4.99963174912E11
# HELP executor_active_threads The approximate number of threads that are actively executing tasks
# TYPE executor_active_threads gauge
executor_active_threads{name="applicationTaskExecutor"} 0.0
# HELP executor_completed_tasks_total The approximate total number of tasks that have completed execution
# TYPE executor_completed_tasks_total counter
executor_completed_tasks_total{name="applicationTaskExecutor"} 0.0
# HELP executor_pool_core_threads The core number of threads for the pool
# TYPE executor_pool_core_threads gauge
executor_pool_core_threads{name="applicationTaskExecutor"} 8.0
# HELP executor_pool_max_threads The maximum allowed number of threads in the pool
# TYPE executor_pool_max_threads gauge
executor_pool_max_threads{name="applicationTaskExecutor"} 2.147483647E9
# HELP executor_pool_size_threads The current number of threads in the pool
# TYPE executor_pool_size_threads gauge
executor_pool_size_threads{name="applicationTaskExecutor"} 0.0
# HELP executor_queue_remaining_tasks The number of additional elements that this queue can ideally accept without blocking
# TYPE executor_queue_remaining_tasks gauge
executor_queue_remaining_tasks{name="applicationTaskExecutor"} 2.147483647E9
# HELP executor_queued_tasks The approximate number of tasks that are queued for execution
# TYPE executor_queued_tasks gauge
executor_queued_tasks{name="applicationTaskExecutor"} 0.0
# HELP graphql_datafetcher_active_seconds
# TYPE graphql_datafetcher_active_seconds summary
graphql_datafetcher_active_seconds_count{graphql_error_type="NONE",graphql_field_name="receiveMessages",graphql_outcome="SUCCESS"} 0
graphql_datafetcher_active_seconds_sum{graphql_error_type="NONE",graphql_field_name="receiveMessages",graphql_outcome="SUCCESS"} 0.0
graphql_datafetcher_active_seconds_count{graphql_error_type="NONE",graphql_field_name="receiveUserList",graphql_outcome="SUCCESS"} 0
graphql_datafetcher_active_seconds_sum{graphql_error_type="NONE",graphql_field_name="receiveUserList",graphql_outcome="SUCCESS"} 0.0
graphql_datafetcher_active_seconds_count{graphql_error_type="NONE",graphql_field_name="userEnteredVenue",graphql_outcome="SUCCESS"} 0
graphql_datafetcher_active_seconds_sum{graphql_error_type="NONE",graphql_field_name="userEnteredVenue",graphql_outcome="SUCCESS"} 0.0
# HELP graphql_datafetcher_active_seconds_max
# TYPE graphql_datafetcher_active_seconds_max gauge
graphql_datafetcher_active_seconds_max{graphql_error_type="NONE",graphql_field_name="receiveMessages",graphql_outcome="SUCCESS"} 0.0
graphql_datafetcher_active_seconds_max{graphql_error_type="NONE",graphql_field_name="receiveUserList",graphql_outcome="SUCCESS"} 0.0
graphql_datafetcher_active_seconds_max{graphql_error_type="NONE",graphql_field_name="userEnteredVenue",graphql_outcome="SUCCESS"} 0.0
# HELP graphql_datafetcher_seconds
# TYPE graphql_datafetcher_seconds summary
graphql_datafetcher_seconds_count{error="none",graphql_error_type="NONE",graphql_field_name="receiveMessages",graphql_outcome="SUCCESS"} 1
graphql_datafetcher_seconds_sum{error="none",graphql_error_type="NONE",graphql_field_name="receiveMessages",graphql_outcome="SUCCESS"} 0.019435275
graphql_datafetcher_seconds_count{error="none",graphql_error_type="NONE",graphql_field_name="receiveUserList",graphql_outcome="SUCCESS"} 1
graphql_datafetcher_seconds_sum{error="none",graphql_error_type="NONE",graphql_field_name="receiveUserList",graphql_outcome="SUCCESS"} 7.20131E-4
graphql_datafetcher_seconds_count{error="none",graphql_error_type="NONE",graphql_field_name="userEnteredVenue",graphql_outcome="SUCCESS"} 1
graphql_datafetcher_seconds_sum{error="none",graphql_error_type="NONE",graphql_field_name="userEnteredVenue",graphql_outcome="SUCCESS"} 0.248657023
# HELP graphql_datafetcher_seconds_max
# TYPE graphql_datafetcher_seconds_max gauge
graphql_datafetcher_seconds_max{error="none",graphql_error_type="NONE",graphql_field_name="receiveMessages",graphql_outcome="SUCCESS"} 0.019435275
graphql_datafetcher_seconds_max{error="none",graphql_error_type="NONE",graphql_field_name="receiveUserList",graphql_outcome="SUCCESS"} 7.20131E-4
graphql_datafetcher_seconds_max{error="none",graphql_error_type="NONE",graphql_field_name="userEnteredVenue",graphql_outcome="SUCCESS"} 0.248657023
# HELP graphql_request_active_seconds
# TYPE graphql_request_active_seconds summary
graphql_request_active_seconds_count{graphql_operation="EnterVenue",graphql_outcome="INTERNAL_ERROR"} 0
graphql_request_active_seconds_sum{graphql_operation="EnterVenue",graphql_outcome="INTERNAL_ERROR"} 0.0
graphql_request_active_seconds_count{graphql_operation="OnMessage",graphql_outcome="INTERNAL_ERROR"} 0
graphql_request_active_seconds_sum{graphql_operation="OnMessage",graphql_outcome="INTERNAL_ERROR"} 0.0
graphql_request_active_seconds_count{graphql_operation="OnUserList",graphql_outcome="INTERNAL_ERROR"} 0
graphql_request_active_seconds_sum{graphql_operation="OnUserList",graphql_outcome="INTERNAL_ERROR"} 0.0
# HELP graphql_request_active_seconds_max
# TYPE graphql_request_active_seconds_max gauge
graphql_request_active_seconds_max{graphql_operation="EnterVenue",graphql_outcome="INTERNAL_ERROR"} 0.0
graphql_request_active_seconds_max{graphql_operation="OnMessage",graphql_outcome="INTERNAL_ERROR"} 0.0
graphql_request_active_seconds_max{graphql_operation="OnUserList",graphql_outcome="INTERNAL_ERROR"} 0.0
# HELP graphql_request_seconds
# TYPE graphql_request_seconds summary
graphql_request_seconds_count{error="none",graphql_operation="EnterVenue",graphql_outcome="SUCCESS"} 1
graphql_request_seconds_sum{error="none",graphql_operation="EnterVenue",graphql_outcome="SUCCESS"} 0.26734592
graphql_request_seconds_count{error="none",graphql_operation="OnMessage",graphql_outcome="SUCCESS"} 1
graphql_request_seconds_sum{error="none",graphql_operation="OnMessage",graphql_outcome="SUCCESS"} 0.10154803
graphql_request_seconds_count{error="none",graphql_operation="OnUserList",graphql_outcome="SUCCESS"} 1
graphql_request_seconds_sum{error="none",graphql_operation="OnUserList",graphql_outcome="SUCCESS"} 0.002622622
# HELP graphql_request_seconds_max
# TYPE graphql_request_seconds_max gauge
graphql_request_seconds_max{error="none",graphql_operation="EnterVenue",graphql_outcome="SUCCESS"} 0.26734592
graphql_request_seconds_max{error="none",graphql_operation="OnMessage",graphql_outcome="SUCCESS"} 0.10154803
graphql_request_seconds_max{error="none",graphql_operation="OnUserList",graphql_outcome="SUCCESS"} 0.002622622
# HELP hikaricp_connections Total connections
# TYPE hikaricp_connections gauge
hikaricp_connections{pool="HikariPool-1"} 10.0
# HELP hikaricp_connections_acquire_seconds Connection acquire time
# TYPE hikaricp_connections_acquire_seconds summary
hikaricp_connections_acquire_seconds_count{pool="HikariPool-1"} 2
hikaricp_connections_acquire_seconds_sum{pool="HikariPool-1"} 0.002
# HELP hikaricp_connections_acquire_seconds_max Connection acquire time
# TYPE hikaricp_connections_acquire_seconds_max gauge
hikaricp_connections_acquire_seconds_max{pool="HikariPool-1"} 0.0
# HELP hikaricp_connections_active Active connections
# TYPE hikaricp_connections_active gauge
hikaricp_connections_active{pool="HikariPool-1"} 0.0
# HELP hikaricp_connections_creation_seconds Connection creation time
# TYPE hikaricp_connections_creation_seconds summary
hikaricp_connections_creation_seconds_count{pool="HikariPool-1"} 0
hikaricp_connections_creation_seconds_sum{pool="HikariPool-1"} 0.0
# HELP hikaricp_connections_creation_seconds_max Connection creation time
# TYPE hikaricp_connections_creation_seconds_max gauge
hikaricp_connections_creation_seconds_max{pool="HikariPool-1"} 0.0
# HELP hikaricp_connections_idle Idle connections
# TYPE hikaricp_connections_idle gauge
hikaricp_connections_idle{pool="HikariPool-1"} 10.0
# HELP hikaricp_connections_max Max connections
# TYPE hikaricp_connections_max gauge
hikaricp_connections_max{pool="HikariPool-1"} 10.0
# HELP hikaricp_connections_min Min connections
# TYPE hikaricp_connections_min gauge
hikaricp_connections_min{pool="HikariPool-1"} 10.0
# HELP hikaricp_connections_pending Pending threads
# TYPE hikaricp_connections_pending gauge
hikaricp_connections_pending{pool="HikariPool-1"} 0.0
# HELP hikaricp_connections_timeout_total Connection timeout total count
# TYPE hikaricp_connections_timeout_total counter
hikaricp_connections_timeout_total{pool="HikariPool-1"} 0.0
# HELP hikaricp_connections_usage_seconds Connection usage time
# TYPE hikaricp_connections_usage_seconds summary
hikaricp_connections_usage_seconds_count{pool="HikariPool-1"} 2
hikaricp_connections_usage_seconds_sum{pool="HikariPool-1"} 0.014
# HELP hikaricp_connections_usage_seconds_max Connection usage time
# TYPE hikaricp_connections_usage_seconds_max gauge
hikaricp_connections_usage_seconds_max{pool="HikariPool-1"} 0.0
# HELP http_server_requests_active_seconds
# TYPE http_server_requests_active_seconds summary
http_server_requests_active_seconds_count{exception="none",method="GET",outcome="SUCCESS",status="200",uri="UNKNOWN"} 1
http_server_requests_active_seconds_sum{exception="none",method="GET",outcome="SUCCESS",status="200",uri="UNKNOWN"} 0.00677309
http_server_requests_active_seconds_count{exception="none",method="OPTIONS",outcome="SUCCESS",status="200",uri="UNKNOWN"} 0
http_server_requests_active_seconds_sum{exception="none",method="OPTIONS",outcome="SUCCESS",status="200",uri="UNKNOWN"} 0.0
http_server_requests_active_seconds_count{exception="none",method="POST",outcome="SUCCESS",status="200",uri="UNKNOWN"} 0
http_server_requests_active_seconds_sum{exception="none",method="POST",outcome="SUCCESS",status="200",uri="UNKNOWN"} 0.0
# HELP http_server_requests_active_seconds_max
# TYPE http_server_requests_active_seconds_max gauge
http_server_requests_active_seconds_max{exception="none",method="GET",outcome="SUCCESS",status="200",uri="UNKNOWN"} 0.006780245
http_server_requests_active_seconds_max{exception="none",method="OPTIONS",outcome="SUCCESS",status="200",uri="UNKNOWN"} 0.0
http_server_requests_active_seconds_max{exception="none",method="POST",outcome="SUCCESS",status="200",uri="UNKNOWN"} 0.0
# HELP http_server_requests_seconds
# TYPE http_server_requests_seconds summary
http_server_requests_seconds_count{error="none",exception="none",method="GET",outcome="SUCCESS",status="200",uri="/actuator/health"} 1
http_server_requests_seconds_sum{error="none",exception="none",method="GET",outcome="SUCCESS",status="200",uri="/actuator/health"} 0.631075062
http_server_requests_seconds_count{error="none",exception="none",method="GET",outcome="SUCCESS",status="200",uri="/actuator/metrics/{requiredMetricName}"} 1
http_server_requests_seconds_sum{error="none",exception="none",method="GET",outcome="SUCCESS",status="200",uri="/actuator/metrics/{requiredMetricName}"} 0.033958879
http_server_requests_seconds_count{error="none",exception="none",method="GET",outcome="SUCCESS",status="200",uri="/actuator/prometheus"} 1
http_server_requests_seconds_sum{error="none",exception="none",method="GET",outcome="SUCCESS",status="200",uri="/actuator/prometheus"} 0.04333061
http_server_requests_seconds_count{error="none",exception="none",method="GET",outcome="SUCCESS",status="200",uri="/graphql"} 1
http_server_requests_seconds_sum{error="none",exception="none",method="GET",outcome="SUCCESS",status="200",uri="/graphql"} 0.053861617
http_server_requests_seconds_count{error="none",exception="none",method="OPTIONS",outcome="SUCCESS",status="200",uri="/graphql"} 1
http_server_requests_seconds_sum{error="none",exception="none",method="OPTIONS",outcome="SUCCESS",status="200",uri="/graphql"} 0.017359502
http_server_requests_seconds_count{error="none",exception="none",method="POST",outcome="SUCCESS",status="200",uri="/graphql"} 1
http_server_requests_seconds_sum{error="none",exception="none",method="POST",outcome="SUCCESS",status="200",uri="/graphql"} 0.300251854
# HELP http_server_requests_seconds_max
# TYPE http_server_requests_seconds_max gauge
http_server_requests_seconds_max{error="none",exception="none",method="GET",outcome="SUCCESS",status="200",uri="/actuator/health"} 0.0
http_server_requests_seconds_max{error="none",exception="none",method="GET",outcome="SUCCESS",status="200",uri="/actuator/metrics/{requiredMetricName}"} 0.0
http_server_requests_seconds_max{error="none",exception="none",method="GET",outcome="SUCCESS",status="200",uri="/actuator/prometheus"} 0.0
http_server_requests_seconds_max{error="none",exception="none",method="GET",outcome="SUCCESS",status="200",uri="/graphql"} 0.053861617
http_server_requests_seconds_max{error="none",exception="none",method="OPTIONS",outcome="SUCCESS",status="200",uri="/graphql"} 0.017359502
http_server_requests_seconds_max{error="none",exception="none",method="POST",outcome="SUCCESS",status="200",uri="/graphql"} 0.300251854
# HELP jdbc_connections_active Current number of active connections that have been allocated from the data source.
# TYPE jdbc_connections_active gauge
jdbc_connections_active{name="dataSource"} 0.0
# HELP jdbc_connections_idle Number of established but idle connections.
# TYPE jdbc_connections_idle gauge
jdbc_connections_idle{name="dataSource"} 10.0
# HELP jdbc_connections_max Maximum number of active connections that can be allocated at the same time.
# TYPE jdbc_connections_max gauge
jdbc_connections_max{name="dataSource"} 10.0
# HELP jdbc_connections_min Minimum number of idle connections in the pool.
# TYPE jdbc_connections_min gauge
jdbc_connections_min{name="dataSource"} 10.0
# HELP jvm_info JVM version info
# TYPE jvm_info gauge
jvm_info{runtime="OpenJDK Runtime Environment",vendor="Homebrew",version="23.0.2"} 1
# HELP jvm_buffer_count_buffers An estimate of the number of buffers in the pool
# TYPE jvm_buffer_count_buffers gauge
jvm_buffer_count_buffers{id="direct"} 19.0
jvm_buffer_count_buffers{id="mapped"} 0.0
jvm_buffer_count_buffers{id="mapped - 'non-volatile memory'"} 0.0
# HELP jvm_buffer_memory_used_bytes An estimate of the memory that the Java virtual machine is using for this buffer pool
# TYPE jvm_buffer_memory_used_bytes gauge
jvm_buffer_memory_used_bytes{id="direct"} 3.7750989E7
jvm_buffer_memory_used_bytes{id="mapped"} 0.0
jvm_buffer_memory_used_bytes{id="mapped - 'non-volatile memory'"} 0.0
# HELP jvm_buffer_total_capacity_bytes An estimate of the total capacity of the buffers in this pool
# TYPE jvm_buffer_total_capacity_bytes gauge
jvm_buffer_total_capacity_bytes{id="direct"} 3.7750988E7
jvm_buffer_total_capacity_bytes{id="mapped"} 0.0
jvm_buffer_total_capacity_bytes{id="mapped - 'non-volatile memory'"} 0.0
# HELP jvm_classes_loaded_classes The number of classes that are currently loaded in the Java virtual machine
# TYPE jvm_classes_loaded_classes gauge
jvm_classes_loaded_classes 23261.0
# HELP jvm_classes_unloaded_classes_total The total number of classes unloaded since the Java virtual machine has started execution
# TYPE jvm_classes_unloaded_classes_total counter
jvm_classes_unloaded_classes_total 232.0
# HELP jvm_compilation_time_ms_total The approximate accumulated elapsed time spent in compilation
# TYPE jvm_compilation_time_ms_total counter
jvm_compilation_time_ms_total{compiler="HotSpot 64-Bit Tiered Compilers"} 2583.0
# HELP jvm_gc_concurrent_phase_time_seconds Time spent in concurrent phase
# TYPE jvm_gc_concurrent_phase_time_seconds summary
jvm_gc_concurrent_phase_time_seconds_count{action="end of concurrent GC pause",cause="No GC",gc="G1 Concurrent GC"} 2
jvm_gc_concurrent_phase_time_seconds_sum{action="end of concurrent GC pause",cause="No GC",gc="G1 Concurrent GC"} 0.04
# HELP jvm_gc_concurrent_phase_time_seconds_max Time spent in concurrent phase
# TYPE jvm_gc_concurrent_phase_time_seconds_max gauge
jvm_gc_concurrent_phase_time_seconds_max{action="end of concurrent GC pause",cause="No GC",gc="G1 Concurrent GC"} 0.0
# HELP jvm_gc_live_data_size_bytes Size of long-lived heap memory pool after reclamation
# TYPE jvm_gc_live_data_size_bytes gauge
jvm_gc_live_data_size_bytes 0.0
# HELP jvm_gc_max_data_size_bytes Max size of long-lived heap memory pool
# TYPE jvm_gc_max_data_size_bytes gauge
jvm_gc_max_data_size_bytes 8.589934592E9
# HELP jvm_gc_memory_allocated_bytes_total Incremented for an increase in the size of the (young) heap memory pool after one GC to before the next
# TYPE jvm_gc_memory_allocated_bytes_total counter
jvm_gc_memory_allocated_bytes_total 1.63577856E8
# HELP jvm_gc_memory_promoted_bytes_total Count of positive increases in the size of the old generation memory pool before GC to after GC
# TYPE jvm_gc_memory_promoted_bytes_total counter
jvm_gc_memory_promoted_bytes_total 1.3084976E7
# HELP jvm_gc_overhead An approximation of the percent of CPU time used by GC activities over the last lookback period or since monitoring began, whichever is shorter, in the range [0..1]
# TYPE jvm_gc_overhead gauge
jvm_gc_overhead 2.0E-5
# HELP jvm_gc_pause_seconds Time spent in GC pause
# TYPE jvm_gc_pause_seconds summary
jvm_gc_pause_seconds_count{action="end of minor GC",cause="G1 Evacuation Pause",gc="G1 Young Generation"} 4
jvm_gc_pause_seconds_sum{action="end of minor GC",cause="G1 Evacuation Pause",gc="G1 Young Generation"} 0.025
# HELP jvm_gc_pause_seconds_max Time spent in GC pause
# TYPE jvm_gc_pause_seconds_max gauge
jvm_gc_pause_seconds_max{action="end of minor GC",cause="G1 Evacuation Pause",gc="G1 Young Generation"} 0.006
# HELP jvm_memory_committed_bytes The amount of memory in bytes that is committed for the Java virtual machine to use
# TYPE jvm_memory_committed_bytes gauge
jvm_memory_committed_bytes{area="heap",id="G1 Eden Space"} 4.194304E7
jvm_memory_committed_bytes{area="heap",id="G1 Old Gen"} 6.7108864E7
jvm_memory_committed_bytes{area="heap",id="G1 Survivor Space"} 4194304.0
jvm_memory_committed_bytes{area="nonheap",id="CodeCache"} 1.3369344E7
jvm_memory_committed_bytes{area="nonheap",id="Compressed Class Space"} 1.6252928E7
jvm_memory_committed_bytes{area="nonheap",id="Metaspace"} 1.11673344E8
# HELP jvm_memory_max_bytes The maximum amount of memory in bytes that can be used for memory management
# TYPE jvm_memory_max_bytes gauge
jvm_memory_max_bytes{area="heap",id="G1 Eden Space"} -1.0
jvm_memory_max_bytes{area="heap",id="G1 Old Gen"} 8.589934592E9
jvm_memory_max_bytes{area="heap",id="G1 Survivor Space"} -1.0
jvm_memory_max_bytes{area="nonheap",id="CodeCache"} 5.0331648E7
jvm_memory_max_bytes{area="nonheap",id="Compressed Class Space"} 1.073741824E9
jvm_memory_max_bytes{area="nonheap",id="Metaspace"} -1.0
# HELP jvm_memory_usage_after_gc The percentage of long-lived heap pool used after the last GC event, in the range [0..1]
# TYPE jvm_memory_usage_after_gc gauge
jvm_memory_usage_after_gc{area="heap",pool="long-lived"} 0.00604398176074028
# HELP jvm_memory_used_bytes The amount of used memory
# TYPE jvm_memory_used_bytes gauge
jvm_memory_used_bytes{area="heap",id="G1 Eden Space"} 2.097152E7
jvm_memory_used_bytes{area="heap",id="G1 Old Gen"} 5.1917408E7
jvm_memory_used_bytes{area="heap",id="G1 Survivor Space"} 3040968.0
jvm_memory_used_bytes{area="nonheap",id="CodeCache"} 1.3333504E7
jvm_memory_used_bytes{area="nonheap",id="Compressed Class Space"} 1.5925496E7
jvm_memory_used_bytes{area="nonheap",id="Metaspace"} 1.10909688E8
# HELP jvm_threads_daemon_threads The current number of live daemon threads
# TYPE jvm_threads_daemon_threads gauge
jvm_threads_daemon_threads 27.0
# HELP jvm_threads_live_threads The current number of live threads including both daemon and non-daemon threads
# TYPE jvm_threads_live_threads gauge
jvm_threads_live_threads 33.0
# HELP jvm_threads_peak_threads The peak live thread count since the Java virtual machine started or peak was reset
# TYPE jvm_threads_peak_threads gauge
jvm_threads_peak_threads 33.0
# HELP jvm_threads_started_threads_total The total number of application threads started in the JVM
# TYPE jvm_threads_started_threads_total counter
jvm_threads_started_threads_total 42.0
# HELP jvm_threads_states_threads The current number of threads
# TYPE jvm_threads_states_threads gauge
jvm_threads_states_threads{state="blocked"} 0.0
jvm_threads_states_threads{state="new"} 0.0
jvm_threads_states_threads{state="runnable"} 18.0
jvm_threads_states_threads{state="terminated"} 0.0
jvm_threads_states_threads{state="timed-waiting"} 11.0
jvm_threads_states_threads{state="waiting"} 4.0
# HELP kafka_app_info_start_time_ms Metric indicating start-time-ms
# TYPE kafka_app_info_start_time_ms gauge
kafka_app_info_start_time_ms{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1.754347632694E12
kafka_app_info_start_time_ms{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1.75434763274E12
kafka_app_info_start_time_ms{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 1.754348220072E12
# HELP kafka_consumer_commit_sync_time_ns_total The total time the consumer has spent in commitSync in nanoseconds
# TYPE kafka_consumer_commit_sync_time_ns_total counter
kafka_consumer_commit_sync_time_ns_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1.9858311E7
kafka_consumer_commit_sync_time_ns_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_committed_time_ns_total The total time the consumer has spent in committed in nanoseconds
# TYPE kafka_consumer_committed_time_ns_total counter
kafka_consumer_committed_time_ns_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 8669929.0
kafka_consumer_committed_time_ns_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 8730131.0
# HELP kafka_consumer_connection_close_total The total number of connections closed
# TYPE kafka_consumer_connection_close_total counter
kafka_consumer_connection_close_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1.0
kafka_consumer_connection_close_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1.0
# HELP kafka_consumer_connection_close_rate The number of connections closed per second
# TYPE kafka_consumer_connection_close_rate gauge
kafka_consumer_connection_close_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_connection_close_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_connection_count The current number of active connections.
# TYPE kafka_consumer_connection_count gauge
kafka_consumer_connection_count{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 3.0
kafka_consumer_connection_count{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 3.0
# HELP kafka_consumer_connection_creation_total The total number of new connections established
# TYPE kafka_consumer_connection_creation_total counter
kafka_consumer_connection_creation_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 4.0
kafka_consumer_connection_creation_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 4.0
# HELP kafka_consumer_connection_creation_rate The number of new connections established per second
# TYPE kafka_consumer_connection_creation_rate gauge
kafka_consumer_connection_creation_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.01928491533922166
kafka_consumer_connection_creation_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.019285287254353654
# HELP kafka_consumer_coordinator_assigned_partitions The number of partitions currently assigned to this consumer
# TYPE kafka_consumer_coordinator_assigned_partitions gauge
kafka_consumer_coordinator_assigned_partitions{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1.0
kafka_consumer_coordinator_assigned_partitions{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1.0
# HELP kafka_consumer_coordinator_commit_total The total number of commit calls
# TYPE kafka_consumer_coordinator_commit_total counter
kafka_consumer_coordinator_commit_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1.0
kafka_consumer_coordinator_commit_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_coordinator_commit_latency_avg The average time taken for a commit request
# TYPE kafka_consumer_coordinator_commit_latency_avg gauge
kafka_consumer_coordinator_commit_latency_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 19.0
kafka_consumer_coordinator_commit_latency_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_coordinator_commit_latency_max The max time taken for a commit request
# TYPE kafka_consumer_coordinator_commit_latency_max gauge
kafka_consumer_coordinator_commit_latency_max{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 19.0
kafka_consumer_coordinator_commit_latency_max{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_coordinator_commit_rate The number of commit calls per second
# TYPE kafka_consumer_coordinator_commit_rate gauge
kafka_consumer_coordinator_commit_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.03323805092069401
kafka_consumer_coordinator_commit_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_coordinator_failed_rebalance_total The total number of failed rebalance events
# TYPE kafka_consumer_coordinator_failed_rebalance_total counter
kafka_consumer_coordinator_failed_rebalance_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1.0
kafka_consumer_coordinator_failed_rebalance_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1.0
# HELP kafka_consumer_coordinator_failed_rebalance_rate_per_hour The number of failed rebalance events per hour
# TYPE kafka_consumer_coordinator_failed_rebalance_rate_per_hour gauge
kafka_consumer_coordinator_failed_rebalance_rate_per_hour{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_coordinator_failed_rebalance_rate_per_hour{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_coordinator_heartbeat_total The total number of heartbeats
# TYPE kafka_consumer_coordinator_heartbeat_total counter
kafka_consumer_coordinator_heartbeat_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 205.0
kafka_consumer_coordinator_heartbeat_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 205.0
# HELP kafka_consumer_coordinator_heartbeat_rate The number of heartbeats per second
# TYPE kafka_consumer_coordinator_heartbeat_rate gauge
kafka_consumer_coordinator_heartbeat_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.3430237543949919
kafka_consumer_coordinator_heartbeat_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.3430237543949919
# HELP kafka_consumer_coordinator_heartbeat_response_time_max The max time taken to receive a response to a heartbeat request
# TYPE kafka_consumer_coordinator_heartbeat_response_time_max gauge
kafka_consumer_coordinator_heartbeat_response_time_max{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 3.0
kafka_consumer_coordinator_heartbeat_response_time_max{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 3.0
# HELP kafka_consumer_coordinator_join_total The total number of group joins
# TYPE kafka_consumer_coordinator_join_total counter
kafka_consumer_coordinator_join_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1.0
kafka_consumer_coordinator_join_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1.0
# HELP kafka_consumer_coordinator_join_rate The number of group joins per second
# TYPE kafka_consumer_coordinator_join_rate gauge
kafka_consumer_coordinator_join_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_coordinator_join_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_coordinator_join_time_avg The average time taken for a group rejoin
# TYPE kafka_consumer_coordinator_join_time_avg gauge
kafka_consumer_coordinator_join_time_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_coordinator_join_time_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_coordinator_join_time_max The max time taken for a group rejoin
# TYPE kafka_consumer_coordinator_join_time_max gauge
kafka_consumer_coordinator_join_time_max{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_coordinator_join_time_max{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_coordinator_last_heartbeat_seconds_ago The number of seconds since the last coordinator heartbeat was sent
# TYPE kafka_consumer_coordinator_last_heartbeat_seconds_ago gauge
kafka_consumer_coordinator_last_heartbeat_seconds_ago{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_coordinator_last_heartbeat_seconds_ago{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_coordinator_last_rebalance_seconds_ago The number of seconds since the last successful rebalance event
# TYPE kafka_consumer_coordinator_last_rebalance_seconds_ago gauge
kafka_consumer_coordinator_last_rebalance_seconds_ago{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 615.0
kafka_consumer_coordinator_last_rebalance_seconds_ago{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 615.0
# HELP kafka_consumer_coordinator_partition_assigned_latency_avg The average time taken for a partition-assigned rebalance listener callback
# TYPE kafka_consumer_coordinator_partition_assigned_latency_avg gauge
kafka_consumer_coordinator_partition_assigned_latency_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_coordinator_partition_assigned_latency_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_coordinator_partition_assigned_latency_max The max time taken for a partition-assigned rebalance listener callback
# TYPE kafka_consumer_coordinator_partition_assigned_latency_max gauge
kafka_consumer_coordinator_partition_assigned_latency_max{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_coordinator_partition_assigned_latency_max{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_coordinator_partition_lost_latency_avg The average time taken for a partition-lost rebalance listener callback
# TYPE kafka_consumer_coordinator_partition_lost_latency_avg gauge
kafka_consumer_coordinator_partition_lost_latency_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_coordinator_partition_lost_latency_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_coordinator_partition_lost_latency_max The max time taken for a partition-lost rebalance listener callback
# TYPE kafka_consumer_coordinator_partition_lost_latency_max gauge
kafka_consumer_coordinator_partition_lost_latency_max{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_coordinator_partition_lost_latency_max{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_coordinator_partition_revoked_latency_avg The average time taken for a partition-revoked rebalance listener callback
# TYPE kafka_consumer_coordinator_partition_revoked_latency_avg gauge
kafka_consumer_coordinator_partition_revoked_latency_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_coordinator_partition_revoked_latency_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_coordinator_partition_revoked_latency_max The max time taken for a partition-revoked rebalance listener callback
# TYPE kafka_consumer_coordinator_partition_revoked_latency_max gauge
kafka_consumer_coordinator_partition_revoked_latency_max{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_coordinator_partition_revoked_latency_max{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_coordinator_rebalance_total The total number of successful rebalance events, each event is composed of several failed re-trials until it succeeded
# TYPE kafka_consumer_coordinator_rebalance_total counter
kafka_consumer_coordinator_rebalance_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1.0
kafka_consumer_coordinator_rebalance_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1.0
# HELP kafka_consumer_coordinator_rebalance_latency_total The total number of milliseconds this consumer has spent in successful rebalances since creation
# TYPE kafka_consumer_coordinator_rebalance_latency_total counter
kafka_consumer_coordinator_rebalance_latency_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 6052.0
kafka_consumer_coordinator_rebalance_latency_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 6052.0
# HELP kafka_consumer_coordinator_rebalance_latency_avg The average time taken for a group to complete a successful rebalance, which may be composed of several failed re-trials until it succeeded
# TYPE kafka_consumer_coordinator_rebalance_latency_avg gauge
kafka_consumer_coordinator_rebalance_latency_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_coordinator_rebalance_latency_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_coordinator_rebalance_latency_max The max time taken for a group to complete a successful rebalance, which may be composed of several failed re-trials until it succeeded
# TYPE kafka_consumer_coordinator_rebalance_latency_max gauge
kafka_consumer_coordinator_rebalance_latency_max{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_coordinator_rebalance_latency_max{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_coordinator_rebalance_rate_per_hour The number of successful rebalance events per hour, each event is composed of several failed re-trials until it succeeded
# TYPE kafka_consumer_coordinator_rebalance_rate_per_hour gauge
kafka_consumer_coordinator_rebalance_rate_per_hour{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_coordinator_rebalance_rate_per_hour{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_coordinator_sync_total The total number of group syncs
# TYPE kafka_consumer_coordinator_sync_total counter
kafka_consumer_coordinator_sync_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1.0
kafka_consumer_coordinator_sync_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1.0
# HELP kafka_consumer_coordinator_sync_rate The number of group syncs per second
# TYPE kafka_consumer_coordinator_sync_rate gauge
kafka_consumer_coordinator_sync_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_coordinator_sync_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_coordinator_sync_time_avg The average time taken for a group sync
# TYPE kafka_consumer_coordinator_sync_time_avg gauge
kafka_consumer_coordinator_sync_time_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_coordinator_sync_time_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_coordinator_sync_time_max The max time taken for a group sync
# TYPE kafka_consumer_coordinator_sync_time_max gauge
kafka_consumer_coordinator_sync_time_max{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_coordinator_sync_time_max{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_failed_authentication_total The total number of connections with failed authentication
# TYPE kafka_consumer_failed_authentication_total counter
kafka_consumer_failed_authentication_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_failed_authentication_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_failed_authentication_rate The number of connections with failed authentication per second
# TYPE kafka_consumer_failed_authentication_rate gauge
kafka_consumer_failed_authentication_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_failed_authentication_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_failed_reauthentication_total The total number of failed re-authentication of connections
# TYPE kafka_consumer_failed_reauthentication_total counter
kafka_consumer_failed_reauthentication_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_failed_reauthentication_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_failed_reauthentication_rate The number of failed re-authentication of connections per second
# TYPE kafka_consumer_failed_reauthentication_rate gauge
kafka_consumer_failed_reauthentication_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_failed_reauthentication_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_fetch_manager_bytes_consumed_total The total number of bytes consumed for a topic
# TYPE kafka_consumer_fetch_manager_bytes_consumed_total counter
kafka_consumer_fetch_manager_bytes_consumed_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1",topic="user-entered"} 970.0
kafka_consumer_fetch_manager_bytes_consumed_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2",topic="user-left"} 0.0
# HELP kafka_consumer_fetch_manager_bytes_consumed_rate The average number of bytes consumed per second for a topic
# TYPE kafka_consumer_fetch_manager_bytes_consumed_rate gauge
kafka_consumer_fetch_manager_bytes_consumed_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1",topic="user-entered"} 27.981307332833325
kafka_consumer_fetch_manager_bytes_consumed_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2",topic="user-left"} 0.0
# HELP kafka_consumer_fetch_manager_fetch_total The total number of fetch requests.
# TYPE kafka_consumer_fetch_manager_fetch_total counter
kafka_consumer_fetch_manager_fetch_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1232.0
kafka_consumer_fetch_manager_fetch_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1223.0
# HELP kafka_consumer_fetch_manager_fetch_latency_avg The average time taken for a fetch request.
# TYPE kafka_consumer_fetch_manager_fetch_latency_avg gauge
kafka_consumer_fetch_manager_fetch_latency_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 470.7171052631579
kafka_consumer_fetch_manager_fetch_latency_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 502.2587412587413
# HELP kafka_consumer_fetch_manager_fetch_latency_max The max time taken for any fetch request.
# TYPE kafka_consumer_fetch_manager_fetch_latency_max gauge
kafka_consumer_fetch_manager_fetch_latency_max{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 512.0
kafka_consumer_fetch_manager_fetch_latency_max{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 512.0
# HELP kafka_consumer_fetch_manager_fetch_rate The number of fetch requests per second.
# TYPE kafka_consumer_fetch_manager_fetch_rate gauge
kafka_consumer_fetch_manager_fetch_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 2.111717487819461
kafka_consumer_fetch_manager_fetch_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1.9972267806485264
# HELP kafka_consumer_fetch_manager_fetch_size_avg The average number of bytes fetched per request for a topic
# TYPE kafka_consumer_fetch_manager_fetch_size_avg gauge
kafka_consumer_fetch_manager_fetch_size_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1",topic="user-entered"} 97.0
kafka_consumer_fetch_manager_fetch_size_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2",topic="user-left"} NaN
# HELP kafka_consumer_fetch_manager_fetch_size_max The maximum number of bytes fetched per request for a topic
# TYPE kafka_consumer_fetch_manager_fetch_size_max gauge
kafka_consumer_fetch_manager_fetch_size_max{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1",topic="user-entered"} 97.0
kafka_consumer_fetch_manager_fetch_size_max{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2",topic="user-left"} NaN
# HELP kafka_consumer_fetch_manager_fetch_throttle_time_avg The average throttle time in ms
# TYPE kafka_consumer_fetch_manager_fetch_throttle_time_avg gauge
kafka_consumer_fetch_manager_fetch_throttle_time_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_fetch_manager_fetch_throttle_time_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_fetch_manager_fetch_throttle_time_max The maximum throttle time in ms
# TYPE kafka_consumer_fetch_manager_fetch_throttle_time_max gauge
kafka_consumer_fetch_manager_fetch_throttle_time_max{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_fetch_manager_fetch_throttle_time_max{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_fetch_manager_preferred_read_replica The current read replica for the partition, or -1 if reading from leader
# TYPE kafka_consumer_fetch_manager_preferred_read_replica gauge
kafka_consumer_fetch_manager_preferred_read_replica{client_id="consumer-social-group-1",kafka_version="3.8.1",partition="0",spring_id="kafkaConsumerFactory.consumer-social-group-1",topic="user-entered"} -1.0
kafka_consumer_fetch_manager_preferred_read_replica{client_id="consumer-social-group-2",kafka_version="3.8.1",partition="0",spring_id="kafkaConsumerFactory.consumer-social-group-2",topic="user-left"} -1.0
# HELP kafka_consumer_fetch_manager_records_consumed_total The total number of records consumed for a topic
# TYPE kafka_consumer_fetch_manager_records_consumed_total counter
kafka_consumer_fetch_manager_records_consumed_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1",topic="user-entered"} 10.0
kafka_consumer_fetch_manager_records_consumed_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2",topic="user-left"} 0.0
# HELP kafka_consumer_fetch_manager_records_consumed_rate The average number of records consumed per second for a topic
# TYPE kafka_consumer_fetch_manager_records_consumed_rate gauge
kafka_consumer_fetch_manager_records_consumed_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1",topic="user-entered"} 0.2884670859054982
kafka_consumer_fetch_manager_records_consumed_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2",topic="user-left"} 0.0
# HELP kafka_consumer_fetch_manager_records_lag The latest lag of the partition
# TYPE kafka_consumer_fetch_manager_records_lag gauge
kafka_consumer_fetch_manager_records_lag{client_id="consumer-social-group-1",kafka_version="3.8.1",partition="0",spring_id="kafkaConsumerFactory.consumer-social-group-1",topic="user-entered"} 0.0
kafka_consumer_fetch_manager_records_lag{client_id="consumer-social-group-2",kafka_version="3.8.1",partition="0",spring_id="kafkaConsumerFactory.consumer-social-group-2",topic="user-left"} 0.0
# HELP kafka_consumer_fetch_manager_records_lag_avg The average lag of the partition
# TYPE kafka_consumer_fetch_manager_records_lag_avg gauge
kafka_consumer_fetch_manager_records_lag_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",partition="0",spring_id="kafkaConsumerFactory.consumer-social-group-1",topic="user-entered"} 0.0
kafka_consumer_fetch_manager_records_lag_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",partition="0",spring_id="kafkaConsumerFactory.consumer-social-group-2",topic="user-left"} NaN
# HELP kafka_consumer_fetch_manager_records_lag_max The max lag of the partition
# TYPE kafka_consumer_fetch_manager_records_lag_max gauge
kafka_consumer_fetch_manager_records_lag_max{client_id="consumer-social-group-1",kafka_version="3.8.1",partition="0",spring_id="kafkaConsumerFactory.consumer-social-group-1",topic="user-entered"} 0.0
kafka_consumer_fetch_manager_records_lag_max{client_id="consumer-social-group-2",kafka_version="3.8.1",partition="0",spring_id="kafkaConsumerFactory.consumer-social-group-2",topic="user-left"} NaN
# HELP kafka_consumer_fetch_manager_records_lead The latest lead of the partition
# TYPE kafka_consumer_fetch_manager_records_lead gauge
kafka_consumer_fetch_manager_records_lead{client_id="consumer-social-group-1",kafka_version="3.8.1",partition="0",spring_id="kafkaConsumerFactory.consumer-social-group-1",topic="user-entered"} 1.0
kafka_consumer_fetch_manager_records_lead{client_id="consumer-social-group-2",kafka_version="3.8.1",partition="0",spring_id="kafkaConsumerFactory.consumer-social-group-2",topic="user-left"} 0.0
# HELP kafka_consumer_fetch_manager_records_lead_avg The average lead of the partition
# TYPE kafka_consumer_fetch_manager_records_lead_avg gauge
kafka_consumer_fetch_manager_records_lead_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",partition="0",spring_id="kafkaConsumerFactory.consumer-social-group-1",topic="user-entered"} 1.0
kafka_consumer_fetch_manager_records_lead_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",partition="0",spring_id="kafkaConsumerFactory.consumer-social-group-2",topic="user-left"} NaN
# HELP kafka_consumer_fetch_manager_records_lead_min The min lead of the partition
# TYPE kafka_consumer_fetch_manager_records_lead_min gauge
kafka_consumer_fetch_manager_records_lead_min{client_id="consumer-social-group-1",kafka_version="3.8.1",partition="0",spring_id="kafkaConsumerFactory.consumer-social-group-1",topic="user-entered"} 1.0
kafka_consumer_fetch_manager_records_lead_min{client_id="consumer-social-group-2",kafka_version="3.8.1",partition="0",spring_id="kafkaConsumerFactory.consumer-social-group-2",topic="user-left"} NaN
# HELP kafka_consumer_fetch_manager_records_per_request_avg The average number of records in each request for a topic
# TYPE kafka_consumer_fetch_manager_records_per_request_avg gauge
kafka_consumer_fetch_manager_records_per_request_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1",topic="user-entered"} 1.0
kafka_consumer_fetch_manager_records_per_request_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2",topic="user-left"} NaN
# HELP kafka_consumer_incoming_byte_total The total number of bytes read off all sockets
# TYPE kafka_consumer_incoming_byte_total counter
kafka_consumer_incoming_byte_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 34949.0
kafka_consumer_incoming_byte_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 32062.0
# HELP kafka_consumer_incoming_byte_rate The number of bytes read off all sockets per second
# TYPE kafka_consumer_incoming_byte_rate gauge
kafka_consumer_incoming_byte_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 85.41396123784088
kafka_consumer_incoming_byte_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 55.64403498885159
# HELP kafka_consumer_io_ratio The fraction of time the I/O thread spent doing I/O
# TYPE kafka_consumer_io_ratio gauge
kafka_consumer_io_ratio{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 3.0998212741072844E-4
kafka_consumer_io_ratio{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 2.8617454186567894E-4
# HELP kafka_consumer_io_time_ns_total The total time the I/O thread spent doing I/O
# TYPE kafka_consumer_io_time_ns_total counter
kafka_consumer_io_time_ns_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 2.61296772E8
kafka_consumer_io_time_ns_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 2.41536774E8
# HELP kafka_consumer_io_time_ns_avg The average length of time for I/O per select call in nanoseconds.
# TYPE kafka_consumer_io_time_ns_avg gauge
kafka_consumer_io_time_ns_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 38535.88181818182
kafka_consumer_io_time_ns_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 36066.47465437788
# HELP kafka_consumer_io_wait_ratio The fraction of time the I/O thread spent waiting
# TYPE kafka_consumer_io_wait_ratio gauge
kafka_consumer_io_wait_ratio{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.9967937475999026
kafka_consumer_io_wait_ratio{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.9971185714076836
# HELP kafka_consumer_io_wait_time_ns_total The total time the I/O thread spent waiting
# TYPE kafka_consumer_io_wait_time_ns_total counter
kafka_consumer_io_wait_time_ns_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 6.20640958285E11
kafka_consumer_io_wait_time_ns_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 6.20724085718E11
# HELP kafka_consumer_io_wait_time_ns_avg The average length of time the I/O thread spent waiting for a socket ready for reads or writes in nanoseconds.
# TYPE kafka_consumer_io_wait_time_ns_avg gauge
kafka_consumer_io_wait_time_ns_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1.2389761663939394E8
kafka_consumer_io_wait_time_ns_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1.2562364916743472E8
# HELP kafka_consumer_io_waittime_total *Deprecated* The total time the I/O thread spent waiting
# TYPE kafka_consumer_io_waittime_total counter
kafka_consumer_io_waittime_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 6.20640958285E11
kafka_consumer_io_waittime_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 6.20724085718E11
# HELP kafka_consumer_iotime_total *Deprecated* The total time the I/O thread spent doing I/O
# TYPE kafka_consumer_iotime_total counter
kafka_consumer_iotime_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 2.61296772E8
kafka_consumer_iotime_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 2.41536774E8
# HELP kafka_consumer_last_poll_seconds_ago The number of seconds since the last poll() invocation.
# TYPE kafka_consumer_last_poll_seconds_ago gauge
kafka_consumer_last_poll_seconds_ago{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_last_poll_seconds_ago{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 2.0
# HELP kafka_consumer_network_io_total The total number of network operations (reads or writes) on all connections
# TYPE kafka_consumer_network_io_total counter
kafka_consumer_network_io_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 2909.0
kafka_consumer_network_io_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 2883.0
# HELP kafka_consumer_network_io_rate The number of network operations (reads or writes) on all connections per second
# TYPE kafka_consumer_network_io_rate gauge
kafka_consumer_network_io_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 5.022786298819033
kafka_consumer_network_io_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 4.728769539863772
# HELP kafka_consumer_node_incoming_byte_total The total number of incoming bytes
# TYPE kafka_consumer_node_incoming_byte_total counter
kafka_consumer_node_incoming_byte_total{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1271.0
kafka_consumer_node_incoming_byte_total{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 29178.0
kafka_consumer_node_incoming_byte_total{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 4500.0
kafka_consumer_node_incoming_byte_total{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1268.0
kafka_consumer_node_incoming_byte_total{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 26533.0
kafka_consumer_node_incoming_byte_total{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 4261.0
# HELP kafka_consumer_node_incoming_byte_rate The number of incoming bytes per second
# TYPE kafka_consumer_node_incoming_byte_rate gauge
kafka_consumer_node_incoming_byte_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 10.548848690554248
kafka_consumer_node_incoming_byte_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 74.26573620610719
kafka_consumer_node_incoming_byte_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 5.941515882835756
kafka_consumer_node_incoming_byte_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 10.548848690554248
kafka_consumer_node_incoming_byte_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 41.953967174905316
kafka_consumer_node_incoming_byte_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 5.488245598990554
# HELP kafka_consumer_node_outgoing_byte_total The total number of outgoing bytes
# TYPE kafka_consumer_node_outgoing_byte_total counter
kafka_consumer_node_outgoing_byte_total{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 252.0
kafka_consumer_node_outgoing_byte_total{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 79059.0
kafka_consumer_node_outgoing_byte_total{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 25396.0
kafka_consumer_node_outgoing_byte_total{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 249.0
kafka_consumer_node_outgoing_byte_total{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 77364.0
kafka_consumer_node_outgoing_byte_total{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 25039.0
# HELP kafka_consumer_node_outgoing_byte_rate The number of outgoing bytes per second
# TYPE kafka_consumer_node_outgoing_byte_rate gauge
kafka_consumer_node_outgoing_byte_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1.214926236621348
kafka_consumer_node_outgoing_byte_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 147.17389494714058
kafka_consumer_node_outgoing_byte_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 42.33685732136076
kafka_consumer_node_outgoing_byte_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1.214926236621348
kafka_consumer_node_outgoing_byte_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 125.86364771497544
kafka_consumer_node_outgoing_byte_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 40.4748196150972
# HELP kafka_consumer_node_request_total The total number of requests sent
# TYPE kafka_consumer_node_request_total counter
kafka_consumer_node_request_total{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 4.0
kafka_consumer_node_request_total{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1237.0
kafka_consumer_node_request_total{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 212.0
kafka_consumer_node_request_total{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 4.0
kafka_consumer_node_request_total{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1227.0
kafka_consumer_node_request_total{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 211.0
# TYPE kafka_consumer_node_request_latency_avg gauge
kafka_consumer_node_request_latency_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_node_request_latency_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_node_request_latency_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_node_request_latency_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
kafka_consumer_node_request_latency_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
kafka_consumer_node_request_latency_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# TYPE kafka_consumer_node_request_latency_max gauge
kafka_consumer_node_request_latency_max{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_node_request_latency_max{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_node_request_latency_max{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_node_request_latency_max{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
kafka_consumer_node_request_latency_max{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
kafka_consumer_node_request_latency_max{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_node_request_rate The number of requests sent per second
# TYPE kafka_consumer_node_request_rate gauge
kafka_consumer_node_request_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.019284171551990126
kafka_consumer_node_request_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 2.122700407891451
kafka_consumer_node_request_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.3552571939581777
kafka_consumer_node_request_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.019284543438434096
kafka_consumer_node_request_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1.9978356780154831
kafka_consumer_node_request_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.3430069458906543
# HELP kafka_consumer_node_request_size_avg The average size of requests sent.
# TYPE kafka_consumer_node_request_size_avg gauge
kafka_consumer_node_request_size_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 63.0
kafka_consumer_node_request_size_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 69.33333333333333
kafka_consumer_node_request_size_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 119.17241379310344
kafka_consumer_node_request_size_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 63.0
kafka_consumer_node_request_size_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 63.0
kafka_consumer_node_request_size_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 118.0
# HELP kafka_consumer_node_request_size_max The maximum size of any request sent.
# TYPE kafka_consumer_node_request_size_max gauge
kafka_consumer_node_request_size_max{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 63.0
kafka_consumer_node_request_size_max{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 114.0
kafka_consumer_node_request_size_max{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 152.0
kafka_consumer_node_request_size_max{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 63.0
kafka_consumer_node_request_size_max{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 63.0
kafka_consumer_node_request_size_max{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 118.0
# HELP kafka_consumer_node_response_total The total number of responses received
# TYPE kafka_consumer_node_response_total counter
kafka_consumer_node_response_total{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 4.0
kafka_consumer_node_response_total{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1236.0
kafka_consumer_node_response_total{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 212.0
kafka_consumer_node_response_total{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 4.0
kafka_consumer_node_response_total{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1226.0
kafka_consumer_node_response_total{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 211.0
# HELP kafka_consumer_node_response_rate The number of responses received per second
# TYPE kafka_consumer_node_response_rate gauge
kafka_consumer_node_response_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.01928491533922166
kafka_consumer_node_response_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 2.122670958254138
kafka_consumer_node_response_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.35526589814894216
kafka_consumer_node_response_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.01928491533922166
kafka_consumer_node_response_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1.997807960709777
kafka_consumer_node_response_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",node_id="node-2147483646",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.34301534993690963
# HELP kafka_consumer_outgoing_byte_total The total number of outgoing bytes sent to all servers
# TYPE kafka_consumer_outgoing_byte_total counter
kafka_consumer_outgoing_byte_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 104707.0
kafka_consumer_outgoing_byte_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 102652.0
# HELP kafka_consumer_outgoing_byte_rate The number of outgoing bytes sent to all servers per second
# TYPE kafka_consumer_outgoing_byte_rate gauge
kafka_consumer_outgoing_byte_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 188.94483442978427
kafka_consumer_outgoing_byte_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 167.89787692797728
# HELP kafka_consumer_poll_idle_ratio_avg The average fraction of time the consumer's poll() is idle as opposed to waiting for the user code to process records.
# TYPE kafka_consumer_poll_idle_ratio_avg gauge
kafka_consumer_poll_idle_ratio_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.49394727807755295
kafka_consumer_poll_idle_ratio_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.4999843771872188
# HELP kafka_consumer_reauthentication_latency_avg The average latency observed due to re-authentication
# TYPE kafka_consumer_reauthentication_latency_avg gauge
kafka_consumer_reauthentication_latency_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_reauthentication_latency_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_reauthentication_latency_max The max latency observed due to re-authentication
# TYPE kafka_consumer_reauthentication_latency_max gauge
kafka_consumer_reauthentication_latency_max{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} NaN
kafka_consumer_reauthentication_latency_max{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} NaN
# HELP kafka_consumer_request_total The total number of requests sent
# TYPE kafka_consumer_request_total counter
kafka_consumer_request_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1453.0
kafka_consumer_request_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1442.0
# HELP kafka_consumer_request_rate The number of requests sent per second
# TYPE kafka_consumer_request_rate gauge
kafka_consumer_request_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 2.486922219363691
kafka_consumer_request_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 2.364413735651194
# HELP kafka_consumer_request_size_avg The average size of requests sent.
# TYPE kafka_consumer_request_size_avg gauge
kafka_consumer_request_size_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 75.97536945812809
kafka_consumer_request_size_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 71.01036269430051
# HELP kafka_consumer_request_size_max The maximum size of any request sent.
# TYPE kafka_consumer_request_size_max gauge
kafka_consumer_request_size_max{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 152.0
kafka_consumer_request_size_max{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 118.0
# HELP kafka_consumer_response_total The total number of responses received
# TYPE kafka_consumer_response_total counter
kafka_consumer_response_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 1452.0
kafka_consumer_response_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 1441.0
# HELP kafka_consumer_response_rate The number of responses received per second
# TYPE kafka_consumer_response_rate gauge
kafka_consumer_response_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 2.4868917528299113
kafka_consumer_response_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 2.364384769931886
# HELP kafka_consumer_select_total The total number of times the I/O layer checked for new I/O to perform
# TYPE kafka_consumer_select_total counter
kafka_consumer_select_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 5027.0
kafka_consumer_select_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 5020.0
# HELP kafka_consumer_select_rate The number of times the I/O layer checked for new I/O to perform per second
# TYPE kafka_consumer_select_rate gauge
kafka_consumer_select_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 8.05292268706903
kafka_consumer_select_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 7.944147283515895
# HELP kafka_consumer_successful_authentication_total The total number of connections with successful authentication
# TYPE kafka_consumer_successful_authentication_total counter
kafka_consumer_successful_authentication_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_successful_authentication_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_successful_authentication_no_reauth_total The total number of connections with successful authentication where the client does not support re-authentication
# TYPE kafka_consumer_successful_authentication_no_reauth_total counter
kafka_consumer_successful_authentication_no_reauth_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_successful_authentication_no_reauth_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_successful_authentication_rate The number of connections with successful authentication per second
# TYPE kafka_consumer_successful_authentication_rate gauge
kafka_consumer_successful_authentication_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_successful_authentication_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_successful_reauthentication_total The total number of successful re-authentication of connections
# TYPE kafka_consumer_successful_reauthentication_total counter
kafka_consumer_successful_reauthentication_total{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_successful_reauthentication_total{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_successful_reauthentication_rate The number of successful re-authentication of connections per second
# TYPE kafka_consumer_successful_reauthentication_rate gauge
kafka_consumer_successful_reauthentication_rate{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 0.0
kafka_consumer_successful_reauthentication_rate{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 0.0
# HELP kafka_consumer_time_between_poll_avg The average delay between invocations of poll() in milliseconds.
# TYPE kafka_consumer_time_between_poll_avg gauge
kafka_consumer_time_between_poll_avg{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 3346.076923076923
kafka_consumer_time_between_poll_avg{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 5000.823529411765
# HELP kafka_consumer_time_between_poll_max The max delay between invocations of poll() in milliseconds.
# TYPE kafka_consumer_time_between_poll_max gauge
kafka_consumer_time_between_poll_max{client_id="consumer-social-group-1",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-1"} 5002.0
kafka_consumer_time_between_poll_max{client_id="consumer-social-group-2",kafka_version="3.8.1",spring_id="kafkaConsumerFactory.consumer-social-group-2"} 5002.0
# HELP kafka_producer_batch_size_avg The average number of bytes sent per partition per-request.
# TYPE kafka_producer_batch_size_avg gauge
kafka_producer_batch_size_avg{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 158.0
# HELP kafka_producer_batch_size_max The max number of bytes sent per partition per-request.
# TYPE kafka_producer_batch_size_max gauge
kafka_producer_batch_size_max{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 158.0
# HELP kafka_producer_batch_split_total The total number of batch splits
# TYPE kafka_producer_batch_split_total counter
kafka_producer_batch_split_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_batch_split_rate The average number of batch splits per second
# TYPE kafka_producer_batch_split_rate gauge
kafka_producer_batch_split_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_buffer_available_bytes The total amount of buffer memory that is not being used (either unallocated or in the free list).
# TYPE kafka_producer_buffer_available_bytes gauge
kafka_producer_buffer_available_bytes{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 3.3554432E7
# HELP kafka_producer_buffer_exhausted_total The total number of record sends that are dropped due to buffer exhaustion
# TYPE kafka_producer_buffer_exhausted_total counter
kafka_producer_buffer_exhausted_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_buffer_exhausted_rate The average per-second number of record sends that are dropped due to buffer exhaustion
# TYPE kafka_producer_buffer_exhausted_rate gauge
kafka_producer_buffer_exhausted_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_buffer_total_bytes The maximum amount of buffer memory the client can use (whether or not it is currently used).
# TYPE kafka_producer_buffer_total_bytes gauge
kafka_producer_buffer_total_bytes{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 3.3554432E7
# HELP kafka_producer_bufferpool_wait_ratio The fraction of time an appender waits for space allocation.
# TYPE kafka_producer_bufferpool_wait_ratio gauge
kafka_producer_bufferpool_wait_ratio{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_bufferpool_wait_time_total *Deprecated* The total time an appender waits for space allocation.
# TYPE kafka_producer_bufferpool_wait_time_total counter
kafka_producer_bufferpool_wait_time_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_bufferpool_wait_time_ns_total The total time in nanoseconds an appender waits for space allocation.
# TYPE kafka_producer_bufferpool_wait_time_ns_total counter
kafka_producer_bufferpool_wait_time_ns_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_compression_rate_avg The average compression rate of record batches, defined as the average ratio of the compressed batch size over the uncompressed size.
# TYPE kafka_producer_compression_rate_avg gauge
kafka_producer_compression_rate_avg{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 1.0
# HELP kafka_producer_connection_close_total The total number of connections closed
# TYPE kafka_producer_connection_close_total counter
kafka_producer_connection_close_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_connection_close_rate The number of connections closed per second
# TYPE kafka_producer_connection_close_rate gauge
kafka_producer_connection_close_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_connection_count The current number of active connections.
# TYPE kafka_producer_connection_count gauge
kafka_producer_connection_count{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 2.0
# HELP kafka_producer_connection_creation_total The total number of new connections established
# TYPE kafka_producer_connection_creation_total counter
kafka_producer_connection_creation_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 2.0
# HELP kafka_producer_connection_creation_rate The number of new connections established per second
# TYPE kafka_producer_connection_creation_rate gauge
kafka_producer_connection_creation_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0573921028466483
# HELP kafka_producer_failed_authentication_total The total number of connections with failed authentication
# TYPE kafka_producer_failed_authentication_total counter
kafka_producer_failed_authentication_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_failed_authentication_rate The number of connections with failed authentication per second
# TYPE kafka_producer_failed_authentication_rate gauge
kafka_producer_failed_authentication_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_failed_reauthentication_total The total number of failed re-authentication of connections
# TYPE kafka_producer_failed_reauthentication_total counter
kafka_producer_failed_reauthentication_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_failed_reauthentication_rate The number of failed re-authentication of connections per second
# TYPE kafka_producer_failed_reauthentication_rate gauge
kafka_producer_failed_reauthentication_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_flush_time_ns_total Total time producer has spent in flush in nanoseconds.
# TYPE kafka_producer_flush_time_ns_total counter
kafka_producer_flush_time_ns_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_incoming_byte_total The total number of bytes read off all sockets
# TYPE kafka_producer_incoming_byte_total counter
kafka_producer_incoming_byte_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 1399.0
# HELP kafka_producer_incoming_byte_rate The number of bytes read off all sockets per second
# TYPE kafka_producer_incoming_byte_rate gauge
kafka_producer_incoming_byte_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 40.1492323145358
# HELP kafka_producer_io_ratio The fraction of time the I/O thread spent doing I/O
# TYPE kafka_producer_io_ratio gauge
kafka_producer_io_ratio{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 1.3936131198347108E-4
# HELP kafka_producer_io_time_ns_total The total time the I/O thread spent doing I/O
# TYPE kafka_producer_io_time_ns_total counter
kafka_producer_io_time_ns_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 4856463.0
# HELP kafka_producer_io_time_ns_avg The average length of time for I/O per select call in nanoseconds.
# TYPE kafka_producer_io_time_ns_avg gauge
kafka_producer_io_time_ns_avg{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 255603.31578947368
# HELP kafka_producer_io_wait_ratio The fraction of time the I/O thread spent waiting
# TYPE kafka_producer_io_wait_ratio gauge
kafka_producer_io_wait_ratio{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.8620524827823691
# HELP kafka_producer_io_wait_time_ns_total The total time the I/O thread spent waiting
# TYPE kafka_producer_io_wait_time_ns_total counter
kafka_producer_io_wait_time_ns_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 3.004080492E10
# HELP kafka_producer_io_wait_time_ns_avg The average length of time the I/O thread spent waiting for a socket ready for reads or writes in nanoseconds.
# TYPE kafka_producer_io_wait_time_ns_avg gauge
kafka_producer_io_wait_time_ns_avg{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 1.5810949957894738E9
# HELP kafka_producer_io_waittime_total *Deprecated* The total time the I/O thread spent waiting
# TYPE kafka_producer_io_waittime_total counter
kafka_producer_io_waittime_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 3.004080492E10
# HELP kafka_producer_iotime_total *Deprecated* The total time the I/O thread spent doing I/O
# TYPE kafka_producer_iotime_total counter
kafka_producer_iotime_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 4856463.0
# HELP kafka_producer_metadata_age The age in seconds of the current producer metadata being used.
# TYPE kafka_producer_metadata_age gauge
kafka_producer_metadata_age{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 34.843
# HELP kafka_producer_metadata_wait_time_ns_total Total time producer has spent waiting on topic metadata in nanoseconds.
# TYPE kafka_producer_metadata_wait_time_ns_total counter
kafka_producer_metadata_wait_time_ns_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 1.13830655E8
# HELP kafka_producer_network_io_total The total number of network operations (reads or writes) on all connections
# TYPE kafka_producer_network_io_total counter
kafka_producer_network_io_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 14.0
# HELP kafka_producer_network_io_rate The number of network operations (reads or writes) on all connections per second
# TYPE kafka_producer_network_io_rate gauge
kafka_producer_network_io_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.4017562487445117
# HELP kafka_producer_node_incoming_byte_total The total number of incoming bytes
# TYPE kafka_producer_node_incoming_byte_total counter
kafka_producer_node_incoming_byte_total{client_id="producer-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaProducerFactory.producer-1"} 636.0
# HELP kafka_producer_node_incoming_byte_rate The number of incoming bytes per second
# TYPE kafka_producer_node_incoming_byte_rate gauge
kafka_producer_node_incoming_byte_rate{client_id="producer-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaProducerFactory.producer-1"} 18.252260008609557
# HELP kafka_producer_node_outgoing_byte_total The total number of outgoing bytes
# TYPE kafka_producer_node_outgoing_byte_total counter
kafka_producer_node_outgoing_byte_total{client_id="producer-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaProducerFactory.producer-1"} 120.0
# HELP kafka_producer_node_outgoing_byte_rate The number of outgoing bytes per second
# TYPE kafka_producer_node_outgoing_byte_rate gauge
kafka_producer_node_outgoing_byte_rate{client_id="producer-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaProducerFactory.producer-1"} 3.4436249892386717
# HELP kafka_producer_node_request_total The total number of requests sent
# TYPE kafka_producer_node_request_total counter
kafka_producer_node_request_total{client_id="producer-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaProducerFactory.producer-1"} 3.0
# TYPE kafka_producer_node_request_latency_avg gauge
kafka_producer_node_request_latency_avg{client_id="producer-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaProducerFactory.producer-1"} NaN
# TYPE kafka_producer_node_request_latency_max gauge
kafka_producer_node_request_latency_max{client_id="producer-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaProducerFactory.producer-1"} NaN
# HELP kafka_producer_node_request_rate The number of requests sent per second
# TYPE kafka_producer_node_request_rate gauge
kafka_producer_node_request_rate{client_id="producer-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaProducerFactory.producer-1"} 0.08609062473096679
# HELP kafka_producer_node_request_size_avg The average size of requests sent.
# TYPE kafka_producer_node_request_size_avg gauge
kafka_producer_node_request_size_avg{client_id="producer-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaProducerFactory.producer-1"} 40.0
# HELP kafka_producer_node_request_size_max The maximum size of any request sent.
# TYPE kafka_producer_node_request_size_max gauge
kafka_producer_node_request_size_max{client_id="producer-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaProducerFactory.producer-1"} 50.0
# HELP kafka_producer_node_response_total The total number of responses received
# TYPE kafka_producer_node_response_total counter
kafka_producer_node_response_total{client_id="producer-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaProducerFactory.producer-1"} 3.0
# HELP kafka_producer_node_response_rate The number of responses received per second
# TYPE kafka_producer_node_response_rate gauge
kafka_producer_node_response_rate{client_id="producer-1",kafka_version="3.8.1",node_id="node--1",spring_id="kafkaProducerFactory.producer-1"} 0.08609556607834697
# HELP kafka_producer_outgoing_byte_total The total number of outgoing bytes sent to all servers
# TYPE kafka_producer_outgoing_byte_total counter
kafka_producer_outgoing_byte_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 484.0
# HELP kafka_producer_outgoing_byte_rate The number of outgoing bytes sent to all servers per second
# TYPE kafka_producer_outgoing_byte_rate gauge
kafka_producer_outgoing_byte_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 13.889686047179017
# HELP kafka_producer_produce_throttle_time_avg The average time in ms a request was throttled by a broker
# TYPE kafka_producer_produce_throttle_time_avg gauge
kafka_producer_produce_throttle_time_avg{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_produce_throttle_time_max The maximum time in ms a request was throttled by a broker
# TYPE kafka_producer_produce_throttle_time_max gauge
kafka_producer_produce_throttle_time_max{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_reauthentication_latency_avg The average latency observed due to re-authentication
# TYPE kafka_producer_reauthentication_latency_avg gauge
kafka_producer_reauthentication_latency_avg{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} NaN
# HELP kafka_producer_reauthentication_latency_max The max latency observed due to re-authentication
# TYPE kafka_producer_reauthentication_latency_max gauge
kafka_producer_reauthentication_latency_max{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} NaN
# HELP kafka_producer_record_error_total The total number of record sends that resulted in errors
# TYPE kafka_producer_record_error_total counter
kafka_producer_record_error_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_record_error_rate The average per-second number of record sends that resulted in errors
# TYPE kafka_producer_record_error_rate gauge
kafka_producer_record_error_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_record_queue_time_avg The average time in ms record batches spent in the send buffer.
# TYPE kafka_producer_record_queue_time_avg gauge
kafka_producer_record_queue_time_avg{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 7.0
# HELP kafka_producer_record_queue_time_max The maximum time in ms record batches spent in the send buffer.
# TYPE kafka_producer_record_queue_time_max gauge
kafka_producer_record_queue_time_max{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 7.0
# HELP kafka_producer_record_retry_total The total number of retried record sends
# TYPE kafka_producer_record_retry_total counter
kafka_producer_record_retry_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_record_retry_rate The average per-second number of retried record sends
# TYPE kafka_producer_record_retry_rate gauge
kafka_producer_record_retry_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_record_send_total The total number of records sent.
# TYPE kafka_producer_record_send_total counter
kafka_producer_record_send_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 1.0
# HELP kafka_producer_record_send_rate The average number of records sent per second.
# TYPE kafka_producer_record_send_rate gauge
kafka_producer_record_send_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.028698522026115655
# HELP kafka_producer_record_size_avg The average record size
# TYPE kafka_producer_record_size_avg gauge
kafka_producer_record_size_avg{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 174.0
# HELP kafka_producer_record_size_max The maximum record size
# TYPE kafka_producer_record_size_max gauge
kafka_producer_record_size_max{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 174.0
# HELP kafka_producer_records_per_request_avg The average number of records per request.
# TYPE kafka_producer_records_per_request_avg gauge
kafka_producer_records_per_request_avg{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 1.0
# HELP kafka_producer_request_total The total number of requests sent
# TYPE kafka_producer_request_total counter
kafka_producer_request_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 7.0
# HELP kafka_producer_request_latency_avg The average request latency in ms
# TYPE kafka_producer_request_latency_avg gauge
kafka_producer_request_latency_avg{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 35.0
# HELP kafka_producer_request_latency_max The maximum request latency in ms
# TYPE kafka_producer_request_latency_max gauge
kafka_producer_request_latency_max{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 35.0
# HELP kafka_producer_request_rate The number of requests sent per second
# TYPE kafka_producer_request_rate gauge
kafka_producer_request_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.20088388911209323
# HELP kafka_producer_request_size_avg The average size of requests sent.
# TYPE kafka_producer_request_size_avg gauge
kafka_producer_request_size_avg{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 69.14285714285714
# HELP kafka_producer_request_size_max The maximum size of any request sent.
# TYPE kafka_producer_request_size_max gauge
kafka_producer_request_size_max{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 214.0
# HELP kafka_producer_requests_in_flight The current number of in-flight requests awaiting a response.
# TYPE kafka_producer_requests_in_flight gauge
kafka_producer_requests_in_flight{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_response_total The total number of responses received
# TYPE kafka_producer_response_total counter
kafka_producer_response_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 7.0
# HELP kafka_producer_response_rate The number of responses received per second
# TYPE kafka_producer_response_rate gauge
kafka_producer_response_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.2008896541828096
# HELP kafka_producer_select_total The total number of times the I/O layer checked for new I/O to perform
# TYPE kafka_producer_select_total counter
kafka_producer_select_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 19.0
# HELP kafka_producer_select_rate The number of times the I/O layer checked for new I/O to perform per second
# TYPE kafka_producer_select_rate gauge
kafka_producer_select_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.5452093316881403
# HELP kafka_producer_successful_authentication_total The total number of connections with successful authentication
# TYPE kafka_producer_successful_authentication_total counter
kafka_producer_successful_authentication_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_successful_authentication_no_reauth_total The total number of connections with successful authentication where the client does not support re-authentication
# TYPE kafka_producer_successful_authentication_no_reauth_total counter
kafka_producer_successful_authentication_no_reauth_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_successful_authentication_rate The number of connections with successful authentication per second
# TYPE kafka_producer_successful_authentication_rate gauge
kafka_producer_successful_authentication_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_successful_reauthentication_total The total number of successful re-authentication of connections
# TYPE kafka_producer_successful_reauthentication_total counter
kafka_producer_successful_reauthentication_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_successful_reauthentication_rate The number of successful re-authentication of connections per second
# TYPE kafka_producer_successful_reauthentication_rate gauge
kafka_producer_successful_reauthentication_rate{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_txn_abort_time_ns_total Total time producer has spent in abortTransaction in nanoseconds.
# TYPE kafka_producer_txn_abort_time_ns_total counter
kafka_producer_txn_abort_time_ns_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_txn_begin_time_ns_total Total time producer has spent in beginTransaction in nanoseconds.
# TYPE kafka_producer_txn_begin_time_ns_total counter
kafka_producer_txn_begin_time_ns_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_txn_commit_time_ns_total Total time producer has spent in commitTransaction in nanoseconds.
# TYPE kafka_producer_txn_commit_time_ns_total counter
kafka_producer_txn_commit_time_ns_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_txn_init_time_ns_total Total time producer has spent in initTransactions in nanoseconds.
# TYPE kafka_producer_txn_init_time_ns_total counter
kafka_producer_txn_init_time_ns_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_txn_send_offsets_time_ns_total Total time producer has spent in sendOffsetsToTransaction in nanoseconds.
# TYPE kafka_producer_txn_send_offsets_time_ns_total counter
kafka_producer_txn_send_offsets_time_ns_total{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP kafka_producer_waiting_threads The number of user threads blocked waiting for buffer memory to enqueue their records
# TYPE kafka_producer_waiting_threads gauge
kafka_producer_waiting_threads{client_id="producer-1",kafka_version="3.8.1",spring_id="kafkaProducerFactory.producer-1"} 0.0
# HELP lettuce_command_completion_seconds Latency between command send and command completion (complete response received
# TYPE lettuce_command_completion_seconds summary
lettuce_command_completion_seconds_count{command="CLIENT",local="local:any",remote="localhost/127.0.0.1:6379"} 4
lettuce_command_completion_seconds_sum{command="CLIENT",local="local:any",remote="localhost/127.0.0.1:6379"} 0.011118501
lettuce_command_completion_seconds_count{command="HELLO",local="local:any",remote="localhost/127.0.0.1:6379"} 2
lettuce_command_completion_seconds_sum{command="HELLO",local="local:any",remote="localhost/127.0.0.1:6379"} 0.009391174
lettuce_command_completion_seconds_count{command="INFO",local="local:any",remote="localhost/127.0.0.1:6379"} 1
lettuce_command_completion_seconds_sum{command="INFO",local="local:any",remote="localhost/127.0.0.1:6379"} 0.001428458
lettuce_command_completion_seconds_count{command="SADD",local="local:any",remote="localhost/127.0.0.1:6379"} 1
lettuce_command_completion_seconds_sum{command="SADD",local="local:any",remote="localhost/127.0.0.1:6379"} 0.00215921
# HELP lettuce_command_completion_seconds_max Latency between command send and command completion (complete response received
# TYPE lettuce_command_completion_seconds_max gauge
lettuce_command_completion_seconds_max{command="CLIENT",local="local:any",remote="localhost/127.0.0.1:6379"} 0.001488496
lettuce_command_completion_seconds_max{command="HELLO",local="local:any",remote="localhost/127.0.0.1:6379"} 0.002526417
lettuce_command_completion_seconds_max{command="INFO",local="local:any",remote="localhost/127.0.0.1:6379"} 0.0
lettuce_command_completion_seconds_max{command="SADD",local="local:any",remote="localhost/127.0.0.1:6379"} 0.00215921
# HELP lettuce_command_firstresponse_seconds Latency between command send and first response (first response received)
# TYPE lettuce_command_firstresponse_seconds summary
lettuce_command_firstresponse_seconds_count{command="CLIENT",local="local:any",remote="localhost/127.0.0.1:6379"} 4
lettuce_command_firstresponse_seconds_sum{command="CLIENT",local="local:any",remote="localhost/127.0.0.1:6379"} 0.010794657
lettuce_command_firstresponse_seconds_count{command="HELLO",local="local:any",remote="localhost/127.0.0.1:6379"} 2
lettuce_command_firstresponse_seconds_sum{command="HELLO",local="local:any",remote="localhost/127.0.0.1:6379"} 0.00527686
lettuce_command_firstresponse_seconds_count{command="INFO",local="local:any",remote="localhost/127.0.0.1:6379"} 1
lettuce_command_firstresponse_seconds_sum{command="INFO",local="local:any",remote="localhost/127.0.0.1:6379"} 0.001259974
lettuce_command_firstresponse_seconds_count{command="SADD",local="local:any",remote="localhost/127.0.0.1:6379"} 1
lettuce_command_firstresponse_seconds_sum{command="SADD",local="local:any",remote="localhost/127.0.0.1:6379"} 0.002115248
# HELP lettuce_command_firstresponse_seconds_max Latency between command send and first response (first response received)
# TYPE lettuce_command_firstresponse_seconds_max gauge
lettuce_command_firstresponse_seconds_max{command="CLIENT",local="local:any",remote="localhost/127.0.0.1:6379"} 0.00147593
lettuce_command_firstresponse_seconds_max{command="HELLO",local="local:any",remote="localhost/127.0.0.1:6379"} 0.001564338
lettuce_command_firstresponse_seconds_max{command="INFO",local="local:any",remote="localhost/127.0.0.1:6379"} 0.0
lettuce_command_firstresponse_seconds_max{command="SADD",local="local:any",remote="localhost/127.0.0.1:6379"} 0.002115248
# HELP logback_events_total Number of log events that were enabled by the effective log level
# TYPE logback_events_total counter
logback_events_total{level="debug"} 0.0
logback_events_total{level="error"} 1.0
logback_events_total{level="info"} 65.0
logback_events_total{level="trace"} 0.0
logback_events_total{level="warn"} 1.0
# HELP process_cpu_time_ns_total The "cpu time" used by the Java Virtual Machine process
# TYPE process_cpu_time_ns_total counter
process_cpu_time_ns_total 1.8525419E10
# HELP process_cpu_usage The "recent cpu usage" for the Java Virtual Machine process
# TYPE process_cpu_usage gauge
process_cpu_usage 9.256094573236882E-4
# HELP process_files_max_files The maximum file descriptor count
# TYPE process_files_max_files gauge
process_files_max_files 2.147483647E9
# HELP process_files_open_files The open file descriptor count
# TYPE process_files_open_files gauge
process_files_open_files 224.0
# HELP process_start_time_seconds Start time of the process since unix epoch.
# TYPE process_start_time_seconds gauge
process_start_time_seconds 1.754347621191E9
# HELP process_uptime_seconds The uptime of the Java virtual machine
# TYPE process_uptime_seconds gauge
process_uptime_seconds 633.924
# HELP spring_kafka_listener_seconds Kafka Listener Timer
# TYPE spring_kafka_listener_seconds summary
spring_kafka_listener_seconds_count{exception="IllegalStateException",name="org.springframework.kafka.KafkaListenerEndpointContainer#0-0",result="failure"} 10
spring_kafka_listener_seconds_sum{exception="IllegalStateException",name="org.springframework.kafka.KafkaListenerEndpointContainer#0-0",result="failure"} 0.013205743
spring_kafka_listener_seconds_count{exception="none",name="org.springframework.kafka.KafkaListenerEndpointContainer#0-0",result="success"} 0
spring_kafka_listener_seconds_sum{exception="none",name="org.springframework.kafka.KafkaListenerEndpointContainer#0-0",result="success"} 0.0
spring_kafka_listener_seconds_count{exception="none",name="org.springframework.kafka.KafkaListenerEndpointContainer#1-0",result="success"} 0
spring_kafka_listener_seconds_sum{exception="none",name="org.springframework.kafka.KafkaListenerEndpointContainer#1-0",result="success"} 0.0
# HELP spring_kafka_listener_seconds_max Kafka Listener Timer
# TYPE spring_kafka_listener_seconds_max gauge
spring_kafka_listener_seconds_max{exception="IllegalStateException",name="org.springframework.kafka.KafkaListenerEndpointContainer#0-0",result="failure"} 0.011056926
spring_kafka_listener_seconds_max{exception="none",name="org.springframework.kafka.KafkaListenerEndpointContainer#0-0",result="success"} 0.0
spring_kafka_listener_seconds_max{exception="none",name="org.springframework.kafka.KafkaListenerEndpointContainer#1-0",result="success"} 0.0
# HELP spring_kafka_template_seconds KafkaTemplate Timer
# TYPE spring_kafka_template_seconds summary
spring_kafka_template_seconds_count{exception="none",name="kafkaTemplate",result="success"} 1
spring_kafka_template_seconds_sum{exception="none",name="kafkaTemplate",result="success"} 0.17170752
# HELP spring_kafka_template_seconds_max KafkaTemplate Timer
# TYPE spring_kafka_template_seconds_max gauge
spring_kafka_template_seconds_max{exception="none",name="kafkaTemplate",result="success"} 0.17170752
# HELP system_cpu_count The number of processors available to the Java virtual machine
# TYPE system_cpu_count gauge
system_cpu_count 8.0
# HELP system_cpu_usage The "recent cpu usage" of the system the application is running in
# TYPE system_cpu_usage gauge
system_cpu_usage 0.22093772324505884
# HELP system_load_average_1m The sum of the number of runnable entities queued to available processors and the number of runnable entities running on the available processors averaged over a period of time
# TYPE system_load_average_1m gauge
system_load_average_1m 2.28955078125
# HELP user_entered_venue_total Number of users who entered each venue
# TYPE user_entered_venue_total counter
user_entered_venue_total{venue="venue"} 1.0